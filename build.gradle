
/*
 * Copyright (C) 2011-2020 Aestas/IT
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'idea'
    id 'java-library'
    id 'groovy'
    id 'org.kordamp.gradle.plugin'
    id 'org.ajoberstar.git-publish'
}

def resolveProperty(Project project, String envKey, String propKey, String defaultValue) {
    String value = System.getenv(envKey)
    if (!value) value = project.findProperty(propKey)
    !value? defaultValue : value
}

project.ext.'gradle.publish.key'    = resolveProperty(project, 'GRADLE_PUBLISH_KEY', 'gradle.publish.key', '**undefined**')
project.ext.'gradle.publish.secret' = resolveProperty(project, 'GRADLE_PUBLISH_SECRET', 'gradle.publish.secret', '**undefined**')

config {
    info {
        name          = 'Groowin Gradle Plugin'
        description   = 'A Gradle plugin for WinRM connectivity'
        inceptionYear = '2011'
        tags          = ['winrm']

        specification {
            enabled = false
        }

        implementation {
            enabled = false
        }
    }

    docs {
        groovydoc {
            options {
                link 'https://docs.gradle.org/5.0/javadoc/', 'org.gradle.'
            }
        }
    }

    plugins {
        plugin {
            name                = project.name
            id                  = 'com.aestasit.groowin'
            implementationClass = 'com.aestasit.gradle.plugins.winrm.RemoteManagementPlugin'
        }
    }
}

repositories {
    mavenLocal()
}

dependencies {
  compileOnly gradleApi()

  api "com.aestasit.infrastructure.groowin:groowin:${groowinVersion}"
  
  testImplementation "commons-io:commons-io:${commonsIOVersion}"
  testImplementation "junit:junit:${junitVersion}"
  
  testRuntimeOnly "ch.qos.logback:logback-core:${logbackVersion}"
  testRuntimeOnly "ch.qos.logback:logback-classic:${logbackVersion}"
}

gitPublish {
    repoUri = rootProject.extensions.findByName('config').info.links.scm
    branch = 'gh-pages'
    contents {
        from(groovydoc.outputs.files) {
            into 'docs/groovydoc'
        }
    }
}

gitPublishCommit.dependsOn(groovydoc)
